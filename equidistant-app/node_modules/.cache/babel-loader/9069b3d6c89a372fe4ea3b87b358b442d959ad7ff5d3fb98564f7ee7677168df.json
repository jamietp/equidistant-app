{"ast":null,"code":"import axios from 'axios';\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 1000) => {\n  try {\n    const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=restaurant|cafe|bar|pub&limit=10&lat=${latitude}&lon=${longitude}&radius=${radius}`, {\n      headers: {\n        'User-Agent': 'EquidistantApp/1.0'\n      }\n    });\n    return response.data.map(place => ({\n      id: place.place_id.toString(),\n      name: place.display_name.split(',')[0],\n      type: place.type || 'place',\n      latitude: parseFloat(place.lat),\n      longitude: parseFloat(place.lon),\n      address: place.display_name\n    }));\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places');\n  }\n};","map":{"version":3,"names":["axios","searchNearbyPlaces","latitude","longitude","radius","response","get","headers","data","map","place","id","place_id","toString","name","display_name","split","type","parseFloat","lat","lon","address","error","console","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 1000): Promise<Place[]> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://nominatim.openstreetmap.org/search?format=json&q=restaurant|cafe|bar|pub&limit=10&lat=${latitude}&lon=${longitude}&radius=${radius}`,\r\n      {\r\n        headers: {\r\n          'User-Agent': 'EquidistantApp/1.0'\r\n        }\r\n      }\r\n    );\r\n\r\n    return response.data.map((place: any) => ({\r\n      id: place.place_id.toString(),\r\n      name: place.display_name.split(',')[0],\r\n      type: place.type || 'place',\r\n      latitude: parseFloat(place.lat),\r\n      longitude: parseFloat(place.lon),\r\n      address: place.display_name\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAazB,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,IAAI,KAAuB;EACxH,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAC9B,iGAAiGJ,QAAQ,QAAQC,SAAS,WAAWC,MAAM,EAAE,EAC7I;MACEG,OAAO,EAAE;QACP,YAAY,EAAE;MAChB;IACF,CACF,CAAC;IAED,OAAOF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,KAAU,KAAM;MACxCC,EAAE,EAAED,KAAK,CAACE,QAAQ,CAACC,QAAQ,CAAC,CAAC;MAC7BC,IAAI,EAAEJ,KAAK,CAACK,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtCC,IAAI,EAAEP,KAAK,CAACO,IAAI,IAAI,OAAO;MAC3Bf,QAAQ,EAAEgB,UAAU,CAACR,KAAK,CAACS,GAAG,CAAC;MAC/BhB,SAAS,EAAEe,UAAU,CAACR,KAAK,CAACU,GAAG,CAAC;MAChCC,OAAO,EAAEX,KAAK,CAACK;IACjB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}