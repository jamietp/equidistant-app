{"ast":null,"code":"import axios from 'axios';\nexport const geocodeAddress = async address => {\n  try {\n    console.log('Geocoding address:', address);\n    const encodedAddress = encodeURIComponent(address);\n    const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=1`, {\n      headers: {\n        'User-Agent': 'EquidistantApp/1.0'\n      }\n    });\n    if (!response.data || response.data.length === 0) {\n      console.error('No results found for address:', address);\n      throw new Error(`Location not found for: ${address}`);\n    }\n    const result = {\n      lat: parseFloat(response.data[0].lat),\n      lon: parseFloat(response.data[0].lon),\n      display_name: response.data[0].display_name\n    };\n    console.log('Geocoding result:', result);\n    return result;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw new Error(`Failed to geocode address: ${address}`);\n  }\n};","map":{"version":3,"names":["axios","geocodeAddress","address","console","log","encodedAddress","encodeURIComponent","response","get","headers","data","length","error","Error","result","lat","parseFloat","lon","display_name"],"sources":["C:/Users/User1/equidistant-app/src/services/geocodingService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\ninterface GeocodingResult {\r\n  lat: number;\r\n  lon: number;\r\n  display_name: string;\r\n}\r\n\r\nexport const geocodeAddress = async (address: string): Promise<GeocodingResult> => {\r\n  try {\r\n    console.log('Geocoding address:', address);\r\n    const encodedAddress = encodeURIComponent(address);\r\n    const response = await axios.get(\r\n      `https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=1`,\r\n      {\r\n        headers: {\r\n          'User-Agent': 'EquidistantApp/1.0'\r\n        }\r\n      }\r\n    );\r\n\r\n    if (!response.data || response.data.length === 0) {\r\n      console.error('No results found for address:', address);\r\n      throw new Error(`Location not found for: ${address}`);\r\n    }\r\n\r\n    const result = {\r\n      lat: parseFloat(response.data[0].lat),\r\n      lon: parseFloat(response.data[0].lon),\r\n      display_name: response.data[0].display_name\r\n    };\r\n\r\n    console.log('Geocoding result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw new Error(`Failed to geocode address: ${address}`);\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAQzB,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAe,IAA+B;EACjF,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,OAAO,CAAC;IAC1C,MAAMG,cAAc,GAAGC,kBAAkB,CAACJ,OAAO,CAAC;IAClD,MAAMK,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAC9B,4DAA4DH,cAAc,UAAU,EACpF;MACEI,OAAO,EAAE;QACP,YAAY,EAAE;MAChB;IACF,CACF,CAAC;IAED,IAAI,CAACF,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAChDR,OAAO,CAACS,KAAK,CAAC,+BAA+B,EAAEV,OAAO,CAAC;MACvD,MAAM,IAAIW,KAAK,CAAC,2BAA2BX,OAAO,EAAE,CAAC;IACvD;IAEA,MAAMY,MAAM,GAAG;MACbC,GAAG,EAAEC,UAAU,CAACT,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACK,GAAG,CAAC;MACrCE,GAAG,EAAED,UAAU,CAACT,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACO,GAAG,CAAC;MACrCC,YAAY,EAAEX,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACQ;IACjC,CAAC;IAEDf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,MAAM,CAAC;IACxC,OAAOA,MAAM;EACf,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAM,IAAIC,KAAK,CAAC,8BAA8BX,OAAO,EAAE,CAAC;EAC1D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}