{"ast":null,"code":"import axios from 'axios';\n// Google Places API key - in a real app, store this securely\n// In Expo, you'd typically use environment variables via app.config.js or .env with expo-constants\nconst GOOGLE_PLACES_API_KEY = 'YOUR_API_KEY'; // Replace with your actual key\n\n/**\r\n * Fetch place details including reviews\r\n * @param placeId The place ID to fetch details for\r\n * @returns Promise with place details\r\n */\nexport const getPlaceDetails = async placeId => {\n  try {\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=reviews,url&key=${GOOGLE_PLACES_API_KEY}`);\n    if (response.data && response.data.result) {\n      const result = response.data.result;\n      return {\n        reviews: result.reviews ? result.reviews.slice(0, 3).map(review => ({\n          author: review.author_name,\n          rating: review.rating,\n          text: review.text,\n          date: review.time,\n          profileUrl: review.profile_photo_url\n        })) : [],\n        url: result.url\n      };\n    }\n    return {\n      reviews: [],\n      url: null\n    };\n  } catch (error) {\n    console.error('Error fetching place details:', error);\n    return {\n      reviews: [],\n      url: null\n    };\n  }\n};\n\n/**\r\n * Search for nearby places based on latitude, longitude, and search radius\r\n * @param lat Latitude of the search center\r\n * @param lng Longitude of the search center\r\n * @param radius Search radius in meters\r\n * @param type Type of places to search for (e.g. 'restaurant', 'cafe', 'bar' or pipe-separated list)\r\n * @returns Promise with search results (limited to 10 places)\r\n */\nexport const searchNearbyPlaces = async (lat, lng, radius, type) => {\n  console.log('Searching for nearby places:', {\n    lat,\n    lng,\n    radius,\n    type\n  });\n  try {\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${GOOGLE_PLACES_API_KEY}`);\n\n    // Check if the response is valid\n    if (response.data && response.data.results) {\n      // Map the places and fetch details for each\n      const places = response.data.results.slice(0, 10).map(place => ({\n        id: place.place_id,\n        name: place.name,\n        type: place.types[0].replace('_', ' '),\n        rating: place.rating || 0,\n        address: place.vicinity,\n        latitude: place.geometry.location.lat,\n        longitude: place.geometry.location.lng,\n        imageUrl: place.photos && place.photos[0] ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : null,\n        googleMapsUrl: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,\n        reviews: []\n      }));\n\n      // Fetch details for each place to get reviews\n      for (const place of places) {\n        const details = await getPlaceDetails(place.id);\n        place.reviews = details.reviews;\n      }\n      return places;\n    }\n    return [];\n  } catch (error) {\n    console.error('Error fetching nearby places:', error);\n    throw new Error('Failed to fetch places nearby');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","getPlaceDetails","placeId","response","get","data","result","reviews","slice","map","review","author","author_name","rating","text","date","time","profileUrl","profile_photo_url","url","error","console","searchNearbyPlaces","lat","lng","radius","type","log","results","places","place","id","place_id","name","types","replace","address","vicinity","latitude","geometry","location","longitude","imageUrl","photos","photo_reference","googleMapsUrl","details","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  author: string;\r\n  rating: number;\r\n  text: string;\r\n  date: number;\r\n  profileUrl?: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  rating: number;\r\n  address: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  imageUrl: string | null;\r\n  googleMapsUrl: string;\r\n  reviews: Review[];\r\n  distanceToMid?: number;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\n// Google Places API key - in a real app, store this securely\r\n// In Expo, you'd typically use environment variables via app.config.js or .env with expo-constants\r\nconst GOOGLE_PLACES_API_KEY = 'YOUR_API_KEY'; // Replace with your actual key\r\n\r\n/**\r\n * Fetch place details including reviews\r\n * @param placeId The place ID to fetch details for\r\n * @returns Promise with place details\r\n */\r\nexport const getPlaceDetails = async (placeId: string) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=reviews,url&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n\r\n    if (response.data && response.data.result) {\r\n      const result = response.data.result;\r\n      return {\r\n        reviews: result.reviews ? result.reviews.slice(0, 3).map((review: any) => ({\r\n          author: review.author_name,\r\n          rating: review.rating,\r\n          text: review.text,\r\n          date: review.time,\r\n          profileUrl: review.profile_photo_url\r\n        })) : [],\r\n        url: result.url\r\n      };\r\n    }\r\n    return { reviews: [], url: null };\r\n  } catch (error) {\r\n    console.error('Error fetching place details:', error);\r\n    return { reviews: [], url: null };\r\n  }\r\n};\r\n\r\n/**\r\n * Search for nearby places based on latitude, longitude, and search radius\r\n * @param lat Latitude of the search center\r\n * @param lng Longitude of the search center\r\n * @param radius Search radius in meters\r\n * @param type Type of places to search for (e.g. 'restaurant', 'cafe', 'bar' or pipe-separated list)\r\n * @returns Promise with search results (limited to 10 places)\r\n */\r\nexport const searchNearbyPlaces = async (lat: number, lng: number, radius: number, type: string) => {\r\n  console.log('Searching for nearby places:', { lat, lng, radius, type });\r\n  \r\n  try {\r\n    const response = await axios.get(\r\n      `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n\r\n    // Check if the response is valid\r\n    if (response.data && response.data.results) {\r\n      // Map the places and fetch details for each\r\n      const places = response.data.results.slice(0, 10).map((place: any) => ({\r\n        id: place.place_id,\r\n        name: place.name,\r\n        type: place.types[0].replace('_', ' '),\r\n        rating: place.rating || 0,\r\n        address: place.vicinity,\r\n        latitude: place.geometry.location.lat,\r\n        longitude: place.geometry.location.lng,\r\n        imageUrl: place.photos && place.photos[0] ? \r\n          `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : null,\r\n        googleMapsUrl: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,\r\n        reviews: []\r\n      }));\r\n      \r\n      // Fetch details for each place to get reviews\r\n      for (const place of places) {\r\n        const details = await getPlaceDetails(place.id);\r\n        place.reviews = details.reviews;\r\n      }\r\n      \r\n      return places;\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error fetching nearby places:', error);\r\n    throw new Error('Failed to fetch places nearby');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}