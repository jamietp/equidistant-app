{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User1\\\\equidistant-app\\\\src\\\\components\\\\ActivityList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { searchNearbyPlaces } from '../services/placesService';\nimport { geocodeAddress } from '../services/geocodingService';\nimport { calculateDistance } from '../utils/distance';\nimport Map from './Map';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ActivityList = () => {\n  _s();\n  const [places, setPlaces] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [locations, setLocations] = useState(null);\n  const location = useLocation();\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const params = new URLSearchParams(location.search);\n        const loc1 = params.get('loc1');\n        const loc2 = params.get('loc2');\n        if (!loc1 || !loc2) {\n          throw new Error('Both locations are required');\n        }\n        const [pos1, pos2] = await Promise.all([geocodeAddress(loc1), geocodeAddress(loc2)]);\n        const midLat = (pos1.lat + pos2.lat) / 2;\n        const midLon = (pos1.lon + pos2.lon) / 2;\n        const newLocations = {\n          location1: [pos1.lat, pos1.lon],\n          location2: [pos2.lat, pos2.lon],\n          midpoint: [midLat, midLon]\n        };\n        setLocations(newLocations);\n        const nearbyPlaces = await searchNearbyPlaces(midLat, midLon);\n\n        // Filter places within 4 miles (6.4km) of midpoint\n        const placesWithDistances = nearbyPlaces.map(place => {\n          const distanceToMid = calculateDistance(midLat, midLon, place.latitude, place.longitude);\n          const distanceToLoc1 = calculateDistance(pos1.lat, pos1.lon, place.latitude, place.longitude);\n          const distanceToLoc2 = calculateDistance(pos2.lat, pos2.lon, place.latitude, place.longitude);\n          return {\n            ...place,\n            distanceToMid,\n            distanceToLoc1,\n            distanceToLoc2\n          };\n        }).filter(place => place.distanceToMid <= 6.4) // 4 miles in km\n        .sort((a, b) => a.distanceToMid - b.distanceToMid);\n        if (placesWithDistances.length === 0) {\n          setError('No places found within 4 miles of the midpoint. Try different locations.');\n          return;\n        }\n        setPlaces(placesWithDistances);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching places:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load places');\n        setPlaces([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlaces();\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [locations && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        locations: locations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-list\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading places...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }, this), !loading && !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Places Near Midpoint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), places.map(place => {\n          var _place$distanceToLoc, _place$distanceToLoc2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"activity-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: place.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: place.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), place.address && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: place.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Distance: \", (_place$distanceToLoc = place.distanceToLoc1) === null || _place$distanceToLoc === void 0 ? void 0 : _place$distanceToLoc.toFixed(1), \"km from location 1, \", ' ', (_place$distanceToLoc2 = place.distanceToLoc2) === null || _place$distanceToLoc2 === void 0 ? void 0 : _place$distanceToLoc2.toFixed(1), \"km from location 2\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)]\n          }, place.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ActivityList, \"QDdeSHMkqs6+PJNII4lkoTNfGT8=\", false, function () {\n  return [useLocation];\n});\n_c = ActivityList;\nexport default ActivityList;\nvar _c;\n$RefreshReg$(_c, \"ActivityList\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","searchNearbyPlaces","geocodeAddress","calculateDistance","Map","jsxDEV","_jsxDEV","Fragment","_Fragment","ActivityList","_s","places","setPlaces","loading","setLoading","error","setError","locations","setLocations","location","fetchPlaces","params","URLSearchParams","search","loc1","get","loc2","Error","pos1","pos2","Promise","all","midLat","lat","midLon","lon","newLocations","location1","location2","midpoint","nearbyPlaces","placesWithDistances","map","place","distanceToMid","latitude","longitude","distanceToLoc1","distanceToLoc2","filter","sort","a","b","length","err","console","message","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","className","_place$distanceToLoc","_place$distanceToLoc2","name","type","address","toFixed","id","_c","$RefreshReg$"],"sources":["C:/Users/User1/equidistant-app/src/components/ActivityList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Place, searchNearbyPlaces } from '../services/placesService';\nimport { geocodeAddress } from '../services/geocodingService';\nimport { calculateDistance } from '../utils/distance';\nimport Map from './Map';\n\nconst ActivityList: React.FC = () => {\n  const [places, setPlaces] = useState<Place[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [locations, setLocations] = useState<{\n    location1: [number, number];\n    location2: [number, number];\n    midpoint: [number, number];\n  } | null>(null);\n  \n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const params = new URLSearchParams(location.search);\n        const loc1 = params.get('loc1');\n        const loc2 = params.get('loc2');\n\n        if (!loc1 || !loc2) {\n          throw new Error('Both locations are required');\n        }\n\n        const [pos1, pos2] = await Promise.all([\n          geocodeAddress(loc1),\n          geocodeAddress(loc2)\n        ]);\n\n        const midLat = (pos1.lat + pos2.lat) / 2;\n        const midLon = (pos1.lon + pos2.lon) / 2;\n\n        const newLocations = {\n          location1: [pos1.lat, pos1.lon] as [number, number],\n          location2: [pos2.lat, pos2.lon] as [number, number],\n          midpoint: [midLat, midLon] as [number, number]\n        };\n        setLocations(newLocations);\n\n        const nearbyPlaces = await searchNearbyPlaces(midLat, midLon);\n        \n        // Filter places within 4 miles (6.4km) of midpoint\n        const placesWithDistances = nearbyPlaces\n          .map(place => {\n            const distanceToMid = calculateDistance(midLat, midLon, place.latitude, place.longitude);\n            const distanceToLoc1 = calculateDistance(pos1.lat, pos1.lon, place.latitude, place.longitude);\n            const distanceToLoc2 = calculateDistance(pos2.lat, pos2.lon, place.latitude, place.longitude);\n            return {\n              ...place,\n              distanceToMid,\n              distanceToLoc1,\n              distanceToLoc2\n            };\n          })\n          .filter(place => place.distanceToMid <= 6.4) // 4 miles in km\n          .sort((a, b) => a.distanceToMid - b.distanceToMid);\n\n        if (placesWithDistances.length === 0) {\n          setError('No places found within 4 miles of the midpoint. Try different locations.');\n          return;\n        }\n\n        setPlaces(placesWithDistances);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching places:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load places');\n        setPlaces([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPlaces();\n  }, [location]);\n\n  return (\n    <div>\n      {locations && (\n        <div style={{ marginBottom: '20px' }}>\n          <Map locations={locations} />\n        </div>\n      )}\n      <div className=\"activity-list\">\n        {loading && <div className=\"loading\">Loading places...</div>}\n        {error && <div className=\"error\">{error}</div>}\n        {!loading && !error && (\n          <>\n            <h2>Places Near Midpoint</h2>\n            {places.map(place => (\n              <div key={place.id} className=\"activity-item\">\n                <h3>{place.name}</h3>\n                <p>{place.type}</p>\n                {place.address && <p>{place.address}</p>}\n                <p>\n                  Distance: {place.distanceToLoc1?.toFixed(1)}km from location 1, {' '}\n                  {place.distanceToLoc2?.toFixed(1)}km from location 2\n                </p>\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ActivityList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}