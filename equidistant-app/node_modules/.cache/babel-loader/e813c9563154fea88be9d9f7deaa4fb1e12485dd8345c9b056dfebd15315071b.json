{"ast":null,"code":"import axios from 'axios';\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 500) => {\n  try {\n    var _response$data;\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\n      params: {\n        location: `${latitude},${longitude}`,\n        radius: radius,\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\n        key: GOOGLE_PLACES_API_KEY,\n        rankby: 'prominence',\n        sensor: false\n      }\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.results)) {\n      console.log('No places found in response:', response.data);\n      return [];\n    }\n    console.log('Found places:', response.data.results.length);\n    const places = await Promise.all(response.data.results.filter(place => place.geometry && place.name).map(async place => {\n      var _place$photos, _place$photos$, _place$types;\n      let photoUrl;\n      if ((_place$photos = place.photos) !== null && _place$photos !== void 0 && (_place$photos$ = _place$photos[0]) !== null && _place$photos$ !== void 0 && _place$photos$.photo_reference) {\n        try {\n          const photoResponse = await axios.get('/maps/api/place/photo', {\n            params: {\n              maxwidth: 400,\n              photo_reference: place.photos[0].photo_reference,\n              key: GOOGLE_PLACES_API_KEY\n            },\n            responseType: 'arraybuffer'\n          });\n          const base64 = Buffer.from(photoResponse.data, 'binary').toString('base64');\n          photoUrl = `data:${photoResponse.headers['content-type']};base64,${base64}`;\n        } catch (error) {\n          console.error('Error fetching photo for place:', place.name, error);\n          photoUrl = undefined;\n        }\n      }\n      return {\n        id: place.place_id,\n        name: place.name,\n        type: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types[0]) || 'venue',\n        latitude: place.geometry.location.lat,\n        longitude: place.geometry.location.lng,\n        address: place.vicinity,\n        rating: place.rating,\n        imageUrl: photoUrl\n      };\n    }));\n    return places;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error fetching places:', error);\n    if (axios.isAxiosError(error) && (_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error_message) {\n      console.error('API Error:', error.response.data.error_message);\n    }\n    throw new Error('Failed to fetch nearby places. Please try again.');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","latitude","longitude","radius","_response$data","console","log","response","get","params","location","type","join","key","rankby","sensor","data","results","length","places","Promise","all","filter","place","geometry","name","map","_place$photos","_place$photos$","_place$types","photoUrl","photos","photo_reference","photoResponse","maxwidth","responseType","base64","Buffer","from","toString","headers","error","undefined","id","place_id","types","lat","lng","address","vicinity","rating","imageUrl","_error$response","_error$response$data","isAxiosError","error_message","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  rating?: number;\r\n}\r\n\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 500): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n    \r\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\r\n      params: {\r\n        location: `${latitude},${longitude}`,\r\n        radius: radius,\r\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\r\n        key: GOOGLE_PLACES_API_KEY,\r\n        rankby: 'prominence',\r\n        sensor: false\r\n      }\r\n    });\r\n\r\n    if (!response.data?.results) {\r\n      console.log('No places found in response:', response.data);\r\n      return [];\r\n    }\r\n\r\n    console.log('Found places:', response.data.results.length);\r\n\r\n    const places = await Promise.all(response.data.results\r\n      .filter((place: any) => place.geometry && place.name)\r\n      .map(async (place: any) => {\r\n        let photoUrl;\r\n        if (place.photos?.[0]?.photo_reference) {\r\n          try {\r\n            const photoResponse = await axios.get('/maps/api/place/photo', {\r\n              params: {\r\n                maxwidth: 400,\r\n                photo_reference: place.photos[0].photo_reference,\r\n                key: GOOGLE_PLACES_API_KEY\r\n              },\r\n              responseType: 'arraybuffer'\r\n            });\r\n            \r\n            const base64 = Buffer.from(photoResponse.data, 'binary').toString('base64');\r\n            photoUrl = `data:${photoResponse.headers['content-type']};base64,${base64}`;\r\n          } catch (error) {\r\n            console.error('Error fetching photo for place:', place.name, error);\r\n            photoUrl = undefined;\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: place.place_id,\r\n          name: place.name,\r\n          type: place.types?.[0] || 'venue',\r\n          latitude: place.geometry.location.lat,\r\n          longitude: place.geometry.location.lng,\r\n          address: place.vicinity,\r\n          rating: place.rating,\r\n          imageUrl: photoUrl\r\n        };\r\n    }));\r\n\r\n    return places;\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    if (axios.isAxiosError(error) && error.response?.data?.error_message) {\r\n      console.error('API Error:', error.response.data.error_message);\r\n    }\r\n    throw new Error('Failed to fetch nearby places. Please try again.');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}