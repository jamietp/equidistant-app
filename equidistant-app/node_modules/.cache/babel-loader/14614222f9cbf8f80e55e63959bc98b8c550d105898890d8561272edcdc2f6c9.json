{"ast":null,"code":"import axios from 'axios';\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 1000) => {\n  const query = `\n    [out:json][timeout:25];\n    (\n      node[\"amenity\"~\"restaurant|cafe|bar|pub\"](around:${radius},${latitude},${longitude});\n      way[\"amenity\"~\"restaurant|cafe|bar|pub\"](around:${radius},${latitude},${longitude});\n    );\n    out body;\n    >;\n    out skel qt;\n  `;\n  try {\n    const response = await axios.post('https://overpass-api.de/api/interpreter', query);\n    return response.data.elements.filter(element => element.tags && element.tags.name).map(element => ({\n      id: element.id.toString(),\n      name: element.tags.name,\n      type: element.tags.amenity,\n      latitude: element.lat || element.center.lat,\n      longitude: element.lon || element.center.lon,\n      address: element.tags['addr:street']\n    }));\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","searchNearbyPlaces","latitude","longitude","radius","query","response","post","data","elements","filter","element","tags","name","map","id","toString","type","amenity","lat","center","lon","address","error","console"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 1000): Promise<Place[]> => {\r\n  const query = `\r\n    [out:json][timeout:25];\r\n    (\r\n      node[\"amenity\"~\"restaurant|cafe|bar|pub\"](around:${radius},${latitude},${longitude});\r\n      way[\"amenity\"~\"restaurant|cafe|bar|pub\"](around:${radius},${latitude},${longitude});\r\n    );\r\n    out body;\r\n    >;\r\n    out skel qt;\r\n  `;\r\n\r\n  try {\r\n    const response = await axios.post('https://overpass-api.de/api/interpreter', query);\r\n    return response.data.elements\r\n      .filter((element: any) => element.tags && element.tags.name)\r\n      .map((element: any) => ({\r\n        id: element.id.toString(),\r\n        name: element.tags.name,\r\n        type: element.tags.amenity,\r\n        latitude: element.lat || element.center.lat,\r\n        longitude: element.lon || element.center.lon,\r\n        address: element.tags['addr:street']\r\n      }));\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAazB,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,IAAI,KAAuB;EACxH,MAAMC,KAAK,GAAG;AAChB;AACA;AACA,yDAAyDD,MAAM,IAAIF,QAAQ,IAAIC,SAAS;AACxF,wDAAwDC,MAAM,IAAIF,QAAQ,IAAIC,SAAS;AACvF;AACA;AACA;AACA;AACA,GAAG;EAED,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,yCAAyC,EAAEF,KAAK,CAAC;IACnF,OAAOC,QAAQ,CAACE,IAAI,CAACC,QAAQ,CAC1BC,MAAM,CAAEC,OAAY,IAAKA,OAAO,CAACC,IAAI,IAAID,OAAO,CAACC,IAAI,CAACC,IAAI,CAAC,CAC3DC,GAAG,CAAEH,OAAY,KAAM;MACtBI,EAAE,EAAEJ,OAAO,CAACI,EAAE,CAACC,QAAQ,CAAC,CAAC;MACzBH,IAAI,EAAEF,OAAO,CAACC,IAAI,CAACC,IAAI;MACvBI,IAAI,EAAEN,OAAO,CAACC,IAAI,CAACM,OAAO;MAC1BhB,QAAQ,EAAES,OAAO,CAACQ,GAAG,IAAIR,OAAO,CAACS,MAAM,CAACD,GAAG;MAC3ChB,SAAS,EAAEQ,OAAO,CAACU,GAAG,IAAIV,OAAO,CAACS,MAAM,CAACC,GAAG;MAC5CC,OAAO,EAAEX,OAAO,CAACC,IAAI,CAAC,aAAa;IACrC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}