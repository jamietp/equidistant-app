{"ast":null,"code":"import axios from 'axios';\n// Google Places API key from environment variable\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n\n/**\r\n * Search for nearby places based on latitude, longitude, and search radius\r\n * @param lat Latitude of the search center\r\n * @param lng Longitude of the search center\r\n * @param radius Search radius in meters\r\n * @param type Type of places to search for (e.g. 'restaurant', 'cafe', etc.)\r\n * @returns Promise with search results\r\n */\nexport const searchNearbyPlaces = async (lat, lng, radius, type) => {\n  console.log('Searching for nearby places:', {\n    lat,\n    lng,\n    radius,\n    type\n  });\n  try {\n    // Ensure we have proper type checking for the API response\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\n      params: {\n        location: `${lat},${lng}`,\n        radius,\n        type,\n        key: GOOGLE_PLACES_API_KEY\n      }\n    });\n    console.log('Places API response:', response);\n\n    // Check if the response is valid and has data\n    if (response.data && response.data.results) {\n      return response.data.results;\n    } else {\n      console.error('Invalid response format:', response.data);\n      throw new Error('Failed to fetch nearby places. Invalid response format.');\n    }\n  } catch (error) {\n    console.error('Error fetching nearby places:', error);\n\n    // More detailed error information\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2;\n      console.error('API response error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n        throw new Error('API key issue or quota exceeded. Please check your Google Places API key.');\n      }\n    }\n    throw new Error('Failed to fetch nearby places. Please try again.');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","lat","lng","radius","type","console","log","response","get","params","location","key","data","results","error","Error","isAxiosError","_error$response","_error$response2","status"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  rating?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  distanceToMid?: number;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\n// Google Places API key from environment variable\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\n/**\r\n * Search for nearby places based on latitude, longitude, and search radius\r\n * @param lat Latitude of the search center\r\n * @param lng Longitude of the search center\r\n * @param radius Search radius in meters\r\n * @param type Type of places to search for (e.g. 'restaurant', 'cafe', etc.)\r\n * @returns Promise with search results\r\n */\r\nexport const searchNearbyPlaces = async (lat: number, lng: number, radius: number, type: string) => {\r\n  console.log('Searching for nearby places:', { lat, lng, radius, type });\r\n  \r\n  try {\r\n    // Ensure we have proper type checking for the API response\r\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\r\n      params: {\r\n        location: `${lat},${lng}`,\r\n        radius,\r\n        type,\r\n        key: GOOGLE_PLACES_API_KEY,\r\n      },\r\n    });\r\n\r\n    console.log('Places API response:', response);\r\n\r\n    // Check if the response is valid and has data\r\n    if (response.data && response.data.results) {\r\n      return response.data.results;\r\n    } else {\r\n      console.error('Invalid response format:', response.data);\r\n      throw new Error('Failed to fetch nearby places. Invalid response format.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching nearby places:', error);\r\n    \r\n    // More detailed error information\r\n    if (axios.isAxiosError(error)) {\r\n      console.error('API response error:', error.response?.data);\r\n      if (error.response?.status === 403) {\r\n        throw new Error('API key issue or quota exceeded. Please check your Google Places API key.');\r\n      }\r\n    }\r\n    \r\n    throw new Error('Failed to fetch nearby places. Please try again.');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAuBzB;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,GAAW,EAAEC,GAAW,EAAEC,MAAc,EAAEC,IAAY,KAAK;EAClGC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE;IAAEL,GAAG;IAAEC,GAAG;IAAEC,MAAM;IAAEC;EAAK,CAAC,CAAC;EAEvE,IAAI;IACF;IACA,MAAMG,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,mCAAmC,EAAE;MACpEC,MAAM,EAAE;QACNC,QAAQ,EAAE,GAAGT,GAAG,IAAIC,GAAG,EAAE;QACzBC,MAAM;QACNC,IAAI;QACJO,GAAG,EAAEf;MACP;IACF,CAAC,CAAC;IAEFS,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,QAAQ,CAAC;;IAE7C;IACA,IAAIA,QAAQ,CAACK,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACC,OAAO,EAAE;MAC1C,OAAON,QAAQ,CAACK,IAAI,CAACC,OAAO;IAC9B,CAAC,MAAM;MACLR,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAEP,QAAQ,CAACK,IAAI,CAAC;MACxD,MAAM,IAAIG,KAAK,CAAC,yDAAyD,CAAC;IAC5E;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;;IAErD;IACA,IAAInB,KAAK,CAACqB,YAAY,CAACF,KAAK,CAAC,EAAE;MAAA,IAAAG,eAAA,EAAAC,gBAAA;MAC7Bb,OAAO,CAACS,KAAK,CAAC,qBAAqB,GAAAG,eAAA,GAAEH,KAAK,CAACP,QAAQ,cAAAU,eAAA,uBAAdA,eAAA,CAAgBL,IAAI,CAAC;MAC1D,IAAI,EAAAM,gBAAA,GAAAJ,KAAK,CAACP,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;QAClC,MAAM,IAAIJ,KAAK,CAAC,2EAA2E,CAAC;MAC9F;IACF;IAEA,MAAM,IAAIA,KAAK,CAAC,kDAAkD,CAAC;EACrE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}