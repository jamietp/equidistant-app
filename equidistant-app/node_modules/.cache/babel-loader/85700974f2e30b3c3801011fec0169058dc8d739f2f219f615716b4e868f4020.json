{"ast":null,"code":"import axios from 'axios';\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 6400) => {\n  try {\n    var _response$data;\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n    // London bounding box constraints\n    const londonBounds = {\n      south: 51.2867,\n      north: 51.7225,\n      west: -0.5339,\n      east: 0.3177\n    };\n\n    // Ensure we're within London bounds\n    if (latitude < londonBounds.south || latitude > londonBounds.north || longitude < londonBounds.west || longitude > londonBounds.east) {\n      console.warn('Location outside London bounds');\n      throw new Error('Location must be within London');\n    }\n    const response = await axios.get(`https://overpass-api.de/api/interpreter`, {\n      params: {\n        data: `\n            [out:json][timeout:25];\n            (\n              node[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\n              way[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\n            );\n            out body;\n            >;\n            out skel qt;\n          `\n      }\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.elements)) {\n      console.log('No places found in response');\n      return [];\n    }\n    return response.data.elements.filter(element => element.tags && (element.tags.name || element.tags.amenity)).map(element => {\n      var _element$center, _element$center2;\n      return {\n        id: element.id.toString(),\n        name: element.tags.name || element.tags.amenity,\n        type: element.tags.amenity || element.tags.leisure || 'venue',\n        latitude: element.lat || ((_element$center = element.center) === null || _element$center === void 0 ? void 0 : _element$center.lat),\n        longitude: element.lon || ((_element$center2 = element.center) === null || _element$center2 === void 0 ? void 0 : _element$center2.lon),\n        address: element.tags['addr:street'] ? `${element.tags['addr:housenumber'] || ''} ${element.tags['addr:street']}, ${element.tags['addr:postcode'] || ''}`.trim() : undefined\n      };\n    }).filter(place => place.latitude && place.longitude);\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places in London');\n  }\n};","map":{"version":3,"names":["axios","searchNearbyPlaces","latitude","longitude","radius","_response$data","console","log","londonBounds","south","north","west","east","warn","Error","response","get","params","data","elements","filter","element","tags","name","amenity","map","_element$center","_element$center2","id","toString","type","leisure","lat","center","lon","address","trim","undefined","place","error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 6400): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n    // London bounding box constraints\r\n    const londonBounds = {\r\n      south: 51.2867,\r\n      north: 51.7225,\r\n      west: -0.5339,\r\n      east: 0.3177\r\n    };\r\n\r\n    // Ensure we're within London bounds\r\n    if (latitude < londonBounds.south || latitude > londonBounds.north ||\r\n        longitude < londonBounds.west || longitude > londonBounds.east) {\r\n      console.warn('Location outside London bounds');\r\n      throw new Error('Location must be within London');\r\n    }\r\n\r\n    const response = await axios.get(\r\n      `https://overpass-api.de/api/interpreter`,\r\n      {\r\n        params: {\r\n          data: `\r\n            [out:json][timeout:25];\r\n            (\r\n              node[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\r\n              way[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\r\n            );\r\n            out body;\r\n            >;\r\n            out skel qt;\r\n          `\r\n        }\r\n      }\r\n    );\r\n\r\n    if (!response.data?.elements) {\r\n      console.log('No places found in response');\r\n      return [];\r\n    }\r\n\r\n    return response.data.elements\r\n      .filter((element: any) => element.tags && (element.tags.name || element.tags.amenity))\r\n      .map((element: any) => ({\r\n        id: element.id.toString(),\r\n        name: element.tags.name || element.tags.amenity,\r\n        type: element.tags.amenity || element.tags.leisure || 'venue',\r\n        latitude: element.lat || element.center?.lat,\r\n        longitude: element.lon || element.center?.lon,\r\n        address: element.tags['addr:street'] ? \r\n          `${element.tags['addr:housenumber'] || ''} ${element.tags['addr:street']}, ${element.tags['addr:postcode'] || ''}`.trim() : \r\n          undefined\r\n      }))\r\n      .filter((place: Place) => place.latitude && place.longitude);\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places in London');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}