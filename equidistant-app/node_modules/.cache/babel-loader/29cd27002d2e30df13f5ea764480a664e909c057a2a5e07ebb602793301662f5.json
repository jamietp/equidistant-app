{"ast":null,"code":"import axios from 'axios';\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 6400) => {\n  try {\n    var _response$data;\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n\n    // Use the proxy middleware route\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\n      params: {\n        location: `${latitude},${longitude}`,\n        radius: radius,\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\n        key: GOOGLE_PLACES_API_KEY,\n        rankby: 'distance'\n      }\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.results)) {\n      console.log('No places found in response:', response.data);\n      return [];\n    }\n    console.log('Found places:', response.data.results.length);\n    const places = response.data.results.map(place => {\n      var _place$types, _place$photos;\n      return {\n        id: place.place_id,\n        name: place.name,\n        type: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types[0]) || 'venue',\n        latitude: place.geometry.location.lat,\n        longitude: place.geometry.location.lng,\n        address: place.vicinity,\n        rating: place.rating,\n        // Use proxy for photo URLs as well\n        imageUrl: (_place$photos = place.photos) !== null && _place$photos !== void 0 && _place$photos[0] ? `/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : undefined\n      };\n    });\n    return places;\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places in London');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","latitude","longitude","radius","_response$data","console","log","response","get","params","location","type","join","key","rankby","data","results","length","places","map","place","_place$types","_place$photos","id","place_id","name","types","geometry","lat","lng","address","vicinity","rating","imageUrl","photos","photo_reference","undefined","error","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  rating?: number;\r\n}\r\n\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 6400): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n    \r\n    // Use the proxy middleware route\r\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\r\n      params: {\r\n        location: `${latitude},${longitude}`,\r\n        radius: radius,\r\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\r\n        key: GOOGLE_PLACES_API_KEY,\r\n        rankby: 'distance'\r\n      }\r\n    });\r\n\r\n    if (!response.data?.results) {\r\n      console.log('No places found in response:', response.data);\r\n      return [];\r\n    }\r\n\r\n    console.log('Found places:', response.data.results.length);\r\n\r\n    const places = response.data.results.map((place: any) => ({\r\n      id: place.place_id,\r\n      name: place.name,\r\n      type: place.types?.[0] || 'venue',\r\n      latitude: place.geometry.location.lat,\r\n      longitude: place.geometry.location.lng,\r\n      address: place.vicinity,\r\n      rating: place.rating,\r\n      // Use proxy for photo URLs as well\r\n      imageUrl: place.photos?.[0] ? \r\n        `/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` :\r\n        undefined\r\n    }));\r\n\r\n    return places;\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places in London');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAsBzB,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B;AAEzE,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,IAAI,KAAuB;EACxH,IAAI;IAAA,IAAAC,cAAA;IACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;MAAEL,QAAQ;MAAEC;IAAU,CAAC,CAAC;;IAElE;IACA,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,mCAAmC,EAAE;MACpEC,MAAM,EAAE;QACNC,QAAQ,EAAE,GAAGT,QAAQ,IAAIC,SAAS,EAAE;QACpCC,MAAM,EAAEA,MAAM;QACdQ,IAAI,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,eAAe,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QACtEC,GAAG,EAAEjB,qBAAqB;QAC1BkB,MAAM,EAAE;MACV;IACF,CAAC,CAAC;IAEF,IAAI,GAAAV,cAAA,GAACG,QAAQ,CAACQ,IAAI,cAAAX,cAAA,eAAbA,cAAA,CAAeY,OAAO,GAAE;MAC3BX,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,QAAQ,CAACQ,IAAI,CAAC;MAC1D,OAAO,EAAE;IACX;IAEAV,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC;IAE1D,MAAMC,MAAM,GAAGX,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAACG,GAAG,CAAEC,KAAU;MAAA,IAAAC,YAAA,EAAAC,aAAA;MAAA,OAAM;QACxDC,EAAE,EAAEH,KAAK,CAACI,QAAQ;QAClBC,IAAI,EAAEL,KAAK,CAACK,IAAI;QAChBd,IAAI,EAAE,EAAAU,YAAA,GAAAD,KAAK,CAACM,KAAK,cAAAL,YAAA,uBAAXA,YAAA,CAAc,CAAC,CAAC,KAAI,OAAO;QACjCpB,QAAQ,EAAEmB,KAAK,CAACO,QAAQ,CAACjB,QAAQ,CAACkB,GAAG;QACrC1B,SAAS,EAAEkB,KAAK,CAACO,QAAQ,CAACjB,QAAQ,CAACmB,GAAG;QACtCC,OAAO,EAAEV,KAAK,CAACW,QAAQ;QACvBC,MAAM,EAAEZ,KAAK,CAACY,MAAM;QACpB;QACAC,QAAQ,EAAE,CAAAX,aAAA,GAAAF,KAAK,CAACc,MAAM,cAAAZ,aAAA,eAAZA,aAAA,CAAe,CAAC,CAAC,GACzB,qDAAqDF,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC,CAACC,eAAe,QAAQvC,qBAAqB,EAAE,GACnHwC;MACJ,CAAC;IAAA,CAAC,CAAC;IAEH,OAAOlB,MAAM;EACf,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdhC,OAAO,CAACgC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;EAC5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}