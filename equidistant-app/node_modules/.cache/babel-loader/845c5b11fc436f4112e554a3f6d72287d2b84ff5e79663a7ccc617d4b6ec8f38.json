{"ast":null,"code":"import axios from 'axios';\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 1000) => {\n  try {\n    const radiusKm = Math.max(0.5, radius / 1000); // Ensure minimum 500m radius\n    const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=restaurant|cafe|bar|pub|entertainment|park&limit=20&lat=${latitude}&lon=${longitude}&addressdetails=1&extratags=1&bounded=1&viewbox=${longitude - 0.1},${latitude + 0.1},${longitude + 0.1},${latitude - 0.1}`, {\n      headers: {\n        'User-Agent': 'EquidistantApp/1.0'\n      }\n    });\n    if (!response.data || response.data.length === 0) {\n      console.warn('No places found in the area');\n      return [];\n    }\n    return response.data.filter(place => {\n      const placeLat = parseFloat(place.lat);\n      const placeLon = parseFloat(place.lon);\n      const distance = Math.sqrt(Math.pow(placeLat - latitude, 2) + Math.pow(placeLon - longitude, 2)) * 111; // Rough distance in km\n      return distance <= radiusKm;\n    }).map(place => ({\n      id: place.place_id.toString(),\n      name: place.display_name.split(',')[0],\n      type: place.type || 'venue',\n      latitude: parseFloat(place.lat),\n      longitude: parseFloat(place.lon),\n      address: place.display_name\n    }));\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places');\n  }\n};","map":{"version":3,"names":["axios","searchNearbyPlaces","latitude","longitude","radius","radiusKm","Math","max","response","get","headers","data","length","console","warn","filter","place","placeLat","parseFloat","lat","placeLon","lon","distance","sqrt","pow","map","id","place_id","toString","name","display_name","split","type","address","error","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 1000): Promise<Place[]> => {\r\n  try {\r\n    const radiusKm = Math.max(0.5, radius / 1000); // Ensure minimum 500m radius\r\n    const response = await axios.get(\r\n      `https://nominatim.openstreetmap.org/search?format=json&q=restaurant|cafe|bar|pub|entertainment|park&limit=20&lat=${latitude}&lon=${longitude}&addressdetails=1&extratags=1&bounded=1&viewbox=${\r\n        longitude - 0.1\r\n      },${latitude + 0.1},${longitude + 0.1},${latitude - 0.1}`,\r\n      {\r\n        headers: {\r\n          'User-Agent': 'EquidistantApp/1.0'\r\n        }\r\n      }\r\n    );\r\n\r\n    if (!response.data || response.data.length === 0) {\r\n      console.warn('No places found in the area');\r\n      return [];\r\n    }\r\n\r\n    return response.data\r\n      .filter((place: any) => {\r\n        const placeLat = parseFloat(place.lat);\r\n        const placeLon = parseFloat(place.lon);\r\n        const distance = Math.sqrt(\r\n          Math.pow(placeLat - latitude, 2) + Math.pow(placeLon - longitude, 2)\r\n        ) * 111; // Rough distance in km\r\n        return distance <= radiusKm;\r\n      })\r\n      .map((place: any) => ({\r\n        id: place.place_id.toString(),\r\n        name: place.display_name.split(',')[0],\r\n        type: place.type || 'venue',\r\n        latitude: parseFloat(place.lat),\r\n        longitude: parseFloat(place.lon),\r\n        address: place.display_name\r\n      }));\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAazB,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,IAAI,KAAuB;EACxH,IAAI;IACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IAC/C,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC9B,oHAAoHP,QAAQ,QAAQC,SAAS,mDAC3IA,SAAS,GAAG,GAAG,IACbD,QAAQ,GAAG,GAAG,IAAIC,SAAS,GAAG,GAAG,IAAID,QAAQ,GAAG,GAAG,EAAE,EACzD;MACEQ,OAAO,EAAE;QACP,YAAY,EAAE;MAChB;IACF,CACF,CAAC;IAED,IAAI,CAACF,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAChDC,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAC;MAC3C,OAAO,EAAE;IACX;IAEA,OAAON,QAAQ,CAACG,IAAI,CACjBI,MAAM,CAAEC,KAAU,IAAK;MACtB,MAAMC,QAAQ,GAAGC,UAAU,CAACF,KAAK,CAACG,GAAG,CAAC;MACtC,MAAMC,QAAQ,GAAGF,UAAU,CAACF,KAAK,CAACK,GAAG,CAAC;MACtC,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,IAAI,CACxBjB,IAAI,CAACkB,GAAG,CAACP,QAAQ,GAAGf,QAAQ,EAAE,CAAC,CAAC,GAAGI,IAAI,CAACkB,GAAG,CAACJ,QAAQ,GAAGjB,SAAS,EAAE,CAAC,CACrE,CAAC,GAAG,GAAG,CAAC,CAAC;MACT,OAAOmB,QAAQ,IAAIjB,QAAQ;IAC7B,CAAC,CAAC,CACDoB,GAAG,CAAET,KAAU,KAAM;MACpBU,EAAE,EAAEV,KAAK,CAACW,QAAQ,CAACC,QAAQ,CAAC,CAAC;MAC7BC,IAAI,EAAEb,KAAK,CAACc,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtCC,IAAI,EAAEhB,KAAK,CAACgB,IAAI,IAAI,OAAO;MAC3B9B,QAAQ,EAAEgB,UAAU,CAACF,KAAK,CAACG,GAAG,CAAC;MAC/BhB,SAAS,EAAEe,UAAU,CAACF,KAAK,CAACK,GAAG,CAAC;MAChCY,OAAO,EAAEjB,KAAK,CAACc;IACjB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdrB,OAAO,CAACqB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}