{"ast":null,"code":"import axios from 'axios';\n// Use direct Google Places API endpoint\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\nconst GOOGLE_PLACES_API_BASE = 'https://maps.googleapis.com/maps/api/place';\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 6400) => {\n  try {\n    var _searchResponse$data;\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n\n    // First, get nearby places using Google Places API directly\n    const searchResponse = await axios.get(`${GOOGLE_PLACES_API_BASE}/nearbysearch/json`, {\n      params: {\n        location: `${latitude},${longitude}`,\n        radius: radius,\n        type: 'restaurant|cafe|bar|night_club|park|movie_theater',\n        key: GOOGLE_PLACES_API_KEY\n      }\n    });\n    if (!((_searchResponse$data = searchResponse.data) !== null && _searchResponse$data !== void 0 && _searchResponse$data.results)) {\n      console.log('No places found in response');\n      return [];\n    }\n\n    // Process only the first 10 results to avoid hitting rate limits\n    const limitedResults = searchResponse.data.results.slice(0, 10);\n    const places = await Promise.all(limitedResults.map(async place => {\n      try {\n        var _place$photos;\n        return {\n          id: place.place_id,\n          name: place.name,\n          type: place.types[0] || 'venue',\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng,\n          address: place.vicinity,\n          rating: place.rating,\n          imageUrl: (_place$photos = place.photos) !== null && _place$photos !== void 0 && _place$photos[0] ? `${GOOGLE_PLACES_API_BASE}/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : undefined\n        };\n      } catch (error) {\n        console.error('Error processing place:', error);\n        return null;\n      }\n    }));\n    return places.filter(place => place !== null);\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places in London');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","GOOGLE_PLACES_API_BASE","searchNearbyPlaces","latitude","longitude","radius","_searchResponse$data","console","log","searchResponse","get","params","location","type","key","data","results","limitedResults","slice","places","Promise","all","map","place","_place$photos","id","place_id","name","types","geometry","lat","lng","address","vicinity","rating","imageUrl","photos","photo_reference","undefined","error","filter","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  rating?: number;\r\n}\r\n\r\n// Use direct Google Places API endpoint\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\nconst GOOGLE_PLACES_API_BASE = 'https://maps.googleapis.com/maps/api/place';\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 6400): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n    \r\n    // First, get nearby places using Google Places API directly\r\n    const searchResponse = await axios.get(\r\n      `${GOOGLE_PLACES_API_BASE}/nearbysearch/json`,\r\n      {\r\n        params: {\r\n          location: `${latitude},${longitude}`,\r\n          radius: radius,\r\n          type: 'restaurant|cafe|bar|night_club|park|movie_theater',\r\n          key: GOOGLE_PLACES_API_KEY\r\n        }\r\n      }\r\n    );\r\n\r\n    if (!searchResponse.data?.results) {\r\n      console.log('No places found in response');\r\n      return [];\r\n    }\r\n\r\n    // Process only the first 10 results to avoid hitting rate limits\r\n    const limitedResults = searchResponse.data.results.slice(0, 10);\r\n    \r\n    const places = await Promise.all(\r\n      limitedResults.map(async (place: any) => {\r\n        try {\r\n          return {\r\n            id: place.place_id,\r\n            name: place.name,\r\n            type: place.types[0] || 'venue',\r\n            latitude: place.geometry.location.lat,\r\n            longitude: place.geometry.location.lng,\r\n            address: place.vicinity,\r\n            rating: place.rating,\r\n            imageUrl: place.photos?.[0] ? \r\n              `${GOOGLE_PLACES_API_BASE}/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : \r\n              undefined\r\n          };\r\n        } catch (error) {\r\n          console.error('Error processing place:', error);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n\r\n    return places.filter((place): place is Place => place !== null);\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places in London');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAsBzB;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B;AACzE,MAAMC,sBAAsB,GAAG,4CAA4C;AAE3E,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,IAAI,KAAuB;EACxH,IAAI;IAAA,IAAAC,oBAAA;IACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;MAAEL,QAAQ;MAAEC;IAAU,CAAC,CAAC;;IAElE;IACA,MAAMK,cAAc,GAAG,MAAMb,KAAK,CAACc,GAAG,CACpC,GAAGT,sBAAsB,oBAAoB,EAC7C;MACEU,MAAM,EAAE;QACNC,QAAQ,EAAE,GAAGT,QAAQ,IAAIC,SAAS,EAAE;QACpCC,MAAM,EAAEA,MAAM;QACdQ,IAAI,EAAE,mDAAmD;QACzDC,GAAG,EAAEjB;MACP;IACF,CACF,CAAC;IAED,IAAI,GAAAS,oBAAA,GAACG,cAAc,CAACM,IAAI,cAAAT,oBAAA,eAAnBA,oBAAA,CAAqBU,OAAO,GAAE;MACjCT,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAO,EAAE;IACX;;IAEA;IACA,MAAMS,cAAc,GAAGR,cAAc,CAACM,IAAI,CAACC,OAAO,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAE/D,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC9BJ,cAAc,CAACK,GAAG,CAAC,MAAOC,KAAU,IAAK;MACvC,IAAI;QAAA,IAAAC,aAAA;QACF,OAAO;UACLC,EAAE,EAAEF,KAAK,CAACG,QAAQ;UAClBC,IAAI,EAAEJ,KAAK,CAACI,IAAI;UAChBd,IAAI,EAAEU,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,IAAI,OAAO;UAC/BzB,QAAQ,EAAEoB,KAAK,CAACM,QAAQ,CAACjB,QAAQ,CAACkB,GAAG;UACrC1B,SAAS,EAAEmB,KAAK,CAACM,QAAQ,CAACjB,QAAQ,CAACmB,GAAG;UACtCC,OAAO,EAAET,KAAK,CAACU,QAAQ;UACvBC,MAAM,EAAEX,KAAK,CAACW,MAAM;UACpBC,QAAQ,EAAE,CAAAX,aAAA,GAAAD,KAAK,CAACa,MAAM,cAAAZ,aAAA,eAAZA,aAAA,CAAe,CAAC,CAAC,GACzB,GAAGvB,sBAAsB,sCAAsCsB,KAAK,CAACa,MAAM,CAAC,CAAC,CAAC,CAACC,eAAe,QAAQxC,qBAAqB,EAAE,GAC7HyC;QACJ,CAAC;MACH,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhC,OAAO,CAACgC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,OAAO,IAAI;MACb;IACF,CAAC,CACH,CAAC;IAED,OAAOpB,MAAM,CAACqB,MAAM,CAAEjB,KAAK,IAAqBA,KAAK,KAAK,IAAI,CAAC;EACjE,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdhC,OAAO,CAACgC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;EAC5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}