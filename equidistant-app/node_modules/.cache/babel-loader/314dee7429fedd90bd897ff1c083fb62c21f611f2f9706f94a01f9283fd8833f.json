{"ast":null,"code":"import axios from 'axios';\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 6400) => {\n  try {\n    var _response$data;\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n    // London bounding box constraints\n    const londonBounds = {\n      south: 51.2867,\n      north: 51.7225,\n      west: -0.5339,\n      east: 0.3177\n    };\n\n    // Ensure we're within London bounds\n    if (latitude < londonBounds.south || latitude > londonBounds.north || longitude < londonBounds.west || longitude > londonBounds.east) {\n      console.warn('Location outside London bounds');\n      throw new Error('Location must be within London');\n    }\n    const response = await axios.get(`https://overpass-api.de/api/interpreter`, {\n      params: {\n        data: `\n            [out:json][timeout:25];\n            (\n              node[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\n              way[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\n            );\n            out body;\n            >;\n            out skel qt;\n          `\n      }\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.elements)) {\n      console.log('No places found in response');\n      return [];\n    }\n    const places = await Promise.all(response.data.elements.filter(element => element.tags && element.tags.name).map(async element => {\n      var _element$center, _element$center2;\n      const lat = element.lat || ((_element$center = element.center) === null || _element$center === void 0 ? void 0 : _element$center.lat);\n      const lon = element.lon || ((_element$center2 = element.center) === null || _element$center2 === void 0 ? void 0 : _element$center2.lon);\n      const name = element.tags.name;\n      console.log('Processing place:', {\n        name,\n        lat,\n        lon\n      });\n      const placeDetails = await getPlaceDetails(name, lat, lon);\n      return {\n        id: element.id.toString(),\n        name: name,\n        type: element.tags.amenity || element.tags.leisure || 'venue',\n        latitude: lat,\n        longitude: lon,\n        address: element.tags['addr:street'] ? `${element.tags['addr:housenumber'] || ''} ${element.tags['addr:street']}, ${element.tags['addr:postcode'] || ''}`.trim() : undefined,\n        imageUrl: placeDetails === null || placeDetails === void 0 ? void 0 : placeDetails.imageUrl,\n        reviews: (placeDetails === null || placeDetails === void 0 ? void 0 : placeDetails.reviews) || [],\n        rating: placeDetails === null || placeDetails === void 0 ? void 0 : placeDetails.rating\n      };\n    }));\n    return places.filter(place => place.latitude && place.longitude);\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places in London');\n  }\n};\nasync function getPlaceDetails(name, lat, lon) {\n  try {\n    var _searchResponse$data$, _details$photos, _details$photos$, _details$reviews;\n    const searchResponse = await axios.get(`/maps/api/place/nearbysearch/json?location=${lat},${lon}&radius=100&name=${encodeURIComponent(name)}&key=${GOOGLE_PLACES_API_KEY}`);\n    if (!((_searchResponse$data$ = searchResponse.data.results) !== null && _searchResponse$data$ !== void 0 && _searchResponse$data$[0])) {\n      console.log('No place found for:', name);\n      return null;\n    }\n    const placeId = searchResponse.data.results[0].place_id;\n    const detailsResponse = await axios.get(`/maps/api/place/details/json?place_id=${placeId}&fields=rating,reviews,photos&key=${GOOGLE_PLACES_API_KEY}`);\n    const details = detailsResponse.data.result;\n    if (!details) {\n      console.log('No details found for place:', placeId);\n      return null;\n    }\n    const photoReference = (_details$photos = details.photos) === null || _details$photos === void 0 ? void 0 : (_details$photos$ = _details$photos[0]) === null || _details$photos$ === void 0 ? void 0 : _details$photos$.photo_reference;\n    return {\n      rating: details.rating,\n      reviews: ((_details$reviews = details.reviews) === null || _details$reviews === void 0 ? void 0 : _details$reviews.map(review => ({\n        rating: review.rating,\n        text: review.text,\n        date: review.time\n      }))) || [],\n      imageUrl: photoReference ? `/maps/api/place/photo?maxwidth=400&photoreference=${photoReference}&key=${GOOGLE_PLACES_API_KEY}` : undefined\n    };\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching place details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","latitude","longitude","radius","_response$data","console","log","londonBounds","south","north","west","east","warn","Error","response","get","params","data","elements","places","Promise","all","filter","element","tags","name","map","_element$center","_element$center2","lat","center","lon","placeDetails","getPlaceDetails","id","toString","type","amenity","leisure","address","trim","undefined","imageUrl","reviews","rating","place","error","_searchResponse$data$","_details$photos","_details$photos$","_details$reviews","searchResponse","encodeURIComponent","results","placeId","place_id","detailsResponse","details","result","photoReference","photos","photo_reference","review","text","date","time","_error$response","message"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  rating?: number;\r\n}\r\n\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 6400): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n    // London bounding box constraints\r\n    const londonBounds = {\r\n      south: 51.2867,\r\n      north: 51.7225,\r\n      west: -0.5339,\r\n      east: 0.3177\r\n    };\r\n\r\n    // Ensure we're within London bounds\r\n    if (latitude < londonBounds.south || latitude > londonBounds.north ||\r\n        longitude < londonBounds.west || longitude > londonBounds.east) {\r\n      console.warn('Location outside London bounds');\r\n      throw new Error('Location must be within London');\r\n    }\r\n\r\n    const response = await axios.get(\r\n      `https://overpass-api.de/api/interpreter`,\r\n      {\r\n        params: {\r\n          data: `\r\n            [out:json][timeout:25];\r\n            (\r\n              node[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\r\n              way[~\"^(amenity|leisure)$\"~\"^(restaurant|cafe|bar|pub|park|cinema|theatre)$\"](around:${radius},${latitude},${longitude});\r\n            );\r\n            out body;\r\n            >;\r\n            out skel qt;\r\n          `\r\n        }\r\n      }\r\n    );\r\n\r\n    if (!response.data?.elements) {\r\n      console.log('No places found in response');\r\n      return [];\r\n    }\r\n\r\n    const places = await Promise.all(\r\n      response.data.elements\r\n        .filter((element: any) => element.tags && element.tags.name)\r\n        .map(async (element: any) => {\r\n          const lat = element.lat || element.center?.lat;\r\n          const lon = element.lon || element.center?.lon;\r\n          const name = element.tags.name;\r\n\r\n          console.log('Processing place:', { name, lat, lon });\r\n          const placeDetails = await getPlaceDetails(name, lat, lon);\r\n          \r\n          return {\r\n            id: element.id.toString(),\r\n            name: name,\r\n            type: element.tags.amenity || element.tags.leisure || 'venue',\r\n            latitude: lat,\r\n            longitude: lon,\r\n            address: element.tags['addr:street'] ? \r\n              `${element.tags['addr:housenumber'] || ''} ${element.tags['addr:street']}, ${element.tags['addr:postcode'] || ''}`.trim() : \r\n              undefined,\r\n            imageUrl: placeDetails?.imageUrl,\r\n            reviews: placeDetails?.reviews || [],\r\n            rating: placeDetails?.rating\r\n          };\r\n        })\r\n    );\r\n\r\n    return places.filter((place: Place) => place.latitude && place.longitude);\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places in London');\r\n  }\r\n};\r\n\r\nasync function getPlaceDetails(name: string, lat: number, lon: number) {\r\n  try {\r\n    const searchResponse = await axios.get(\r\n      `/maps/api/place/nearbysearch/json?location=${lat},${lon}&radius=100&name=${encodeURIComponent(name)}&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n\r\n    if (!searchResponse.data.results?.[0]) {\r\n      console.log('No place found for:', name);\r\n      return null;\r\n    }\r\n\r\n    const placeId = searchResponse.data.results[0].place_id;\r\n    const detailsResponse = await axios.get(\r\n      `/maps/api/place/details/json?place_id=${placeId}&fields=rating,reviews,photos&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n\r\n    const details = detailsResponse.data.result;\r\n    if (!details) {\r\n      console.log('No details found for place:', placeId);\r\n      return null;\r\n    }\r\n\r\n    const photoReference = details.photos?.[0]?.photo_reference;\r\n    return {\r\n      rating: details.rating,\r\n      reviews: details.reviews?.map((review: any) => ({\r\n        rating: review.rating,\r\n        text: review.text,\r\n        date: review.time\r\n      })) || [],\r\n      imageUrl: photoReference ? \r\n        `/maps/api/place/photo?maxwidth=400&photoreference=${photoReference}&key=${GOOGLE_PLACES_API_KEY}` :\r\n        undefined\r\n    };\r\n  } catch (error: any) {\r\n    console.error('Error fetching place details:', error.response?.data || error.message);\r\n    return null;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}