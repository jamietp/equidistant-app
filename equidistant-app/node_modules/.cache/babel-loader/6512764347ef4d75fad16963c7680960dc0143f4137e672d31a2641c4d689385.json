{"ast":null,"code":"import axios from 'axios';\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 500) => {\n  try {\n    var _response$data;\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\n      params: {\n        location: `${latitude},${longitude}`,\n        radius: radius,\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\n        key: GOOGLE_PLACES_API_KEY\n      }\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.results)) {\n      console.log('No places found in response:', response.data);\n      return [];\n    }\n    console.log('Found places:', response.data.results.length);\n    const places = await Promise.all(response.data.results.filter(place => place.geometry && place.name).map(async place => {\n      var _place$photos, _place$photos$, _place$types, _place$types$, _details, _details$data, _details$data$result, _details$data$result$;\n      let imageUrl;\n      if ((_place$photos = place.photos) !== null && _place$photos !== void 0 && (_place$photos$ = _place$photos[0]) !== null && _place$photos$ !== void 0 && _place$photos$.photo_reference) {\n        imageUrl = `/maps/api/place/photo?maxwidth=400&photo_reference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}`;\n      }\n      let details;\n      try {\n        details = await axios.get('/maps/api/place/details/json', {\n          params: {\n            place_id: place.place_id,\n            fields: 'review',\n            key: GOOGLE_PLACES_API_KEY\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching place details:', error);\n      }\n      return {\n        id: place.place_id,\n        name: place.name,\n        type: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : (_place$types$ = _place$types[0]) === null || _place$types$ === void 0 ? void 0 : _place$types$.replace(/_/g, ' ')) || 'venue',\n        latitude: place.geometry.location.lat,\n        longitude: place.geometry.location.lng,\n        address: place.vicinity,\n        rating: place.rating,\n        imageUrl,\n        reviews: (_details = details) === null || _details === void 0 ? void 0 : (_details$data = _details.data) === null || _details$data === void 0 ? void 0 : (_details$data$result = _details$data.result) === null || _details$data$result === void 0 ? void 0 : (_details$data$result$ = _details$data$result.reviews) === null || _details$data$result$ === void 0 ? void 0 : _details$data$result$.map(review => ({\n          rating: review.rating,\n          text: review.text,\n          date: review.time\n        }))\n      };\n    }));\n    return places;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error fetching places:', error);\n    if (axios.isAxiosError(error) && (_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error_message) {\n      console.error('API Error:', error.response.data.error_message);\n    }\n    throw new Error('Failed to fetch nearby places. Please try again.');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","latitude","longitude","radius","_response$data","console","log","response","get","params","location","type","join","key","data","results","length","places","Promise","all","filter","place","geometry","name","map","_place$photos","_place$photos$","_place$types","_place$types$","_details","_details$data","_details$data$result","_details$data$result$","imageUrl","photos","photo_reference","details","place_id","fields","error","id","types","replace","lat","lng","address","vicinity","rating","reviews","result","review","text","date","time","_error$response","_error$response$data","isAxiosError","error_message","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  rating?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  distanceToMid?: number;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 500): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n\r\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\r\n      params: {\r\n        location: `${latitude},${longitude}`,\r\n        radius: radius,\r\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\r\n        key: GOOGLE_PLACES_API_KEY,\r\n      }\r\n    });\r\n\r\n    if (!response.data?.results) {\r\n      console.log('No places found in response:', response.data);\r\n      return [];\r\n    }\r\n\r\n    console.log('Found places:', response.data.results.length);\r\n\r\n    const places = await Promise.all(response.data.results\r\n      .filter((place: any) => place.geometry && place.name)\r\n      .map(async (place: any) => {\r\n        let imageUrl;\r\n        if (place.photos?.[0]?.photo_reference) {\r\n          imageUrl = `/maps/api/place/photo?maxwidth=400&photo_reference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}`;\r\n        }\r\n\r\n        let details;\r\n        try {\r\n          details = await axios.get('/maps/api/place/details/json', {\r\n            params: {\r\n              place_id: place.place_id,\r\n              fields: 'review',\r\n              key: GOOGLE_PLACES_API_KEY,\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error('Error fetching place details:', error);\r\n        }\r\n\r\n        return {\r\n          id: place.place_id,\r\n          name: place.name,\r\n          type: place.types?.[0]?.replace(/_/g, ' ') || 'venue',\r\n          latitude: place.geometry.location.lat,\r\n          longitude: place.geometry.location.lng,\r\n          address: place.vicinity,\r\n          rating: place.rating,\r\n          imageUrl,\r\n          reviews: details?.data?.result?.reviews?.map((review: any) => ({\r\n            rating: review.rating,\r\n            text: review.text,\r\n            date: review.time\r\n          }))\r\n        };\r\n    }));\r\n\r\n    return places;\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    if (axios.isAxiosError(error) && error.response?.data?.error_message) {\r\n      console.error('API Error:', error.response.data.error_message);\r\n    }\r\n    throw new Error('Failed to fetch nearby places. Please try again.');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}