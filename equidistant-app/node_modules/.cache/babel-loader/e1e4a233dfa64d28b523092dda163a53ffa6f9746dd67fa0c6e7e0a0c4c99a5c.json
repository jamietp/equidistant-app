{"ast":null,"code":"import axios from'axios';const GOOGLE_PLACES_API_KEY=process.env.REACT_APP_GOOGLE_PLACES_API_KEY;export const searchNearbyPlaces=async function(latitude,longitude){let radius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:500;try{var _response$data;console.log('Searching for places near:',{latitude,longitude});const response=await axios.get('/maps/api/place/nearbysearch/json',{params:{location:`${latitude},${longitude}`,radius:radius,type:['restaurant','cafe','bar','park','movie_theater'].join('|'),key:GOOGLE_PLACES_API_KEY}});if(!((_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.results)){console.log('No places found in response:',response.data);return[];}console.log('Found places:',response.data.results.length);const places=await Promise.all(response.data.results.filter(place=>place.geometry&&place.name).map(async place=>{var _place$photos,_place$photos$,_place$types,_place$types$,_details,_details$data,_details$data$result,_details$data$result$;let imageUrl;if((_place$photos=place.photos)!==null&&_place$photos!==void 0&&(_place$photos$=_place$photos[0])!==null&&_place$photos$!==void 0&&_place$photos$.photo_reference){imageUrl=`/maps/api/place/photo?maxwidth=400&photo_reference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}`;}let details;try{details=await axios.get('/maps/api/place/details/json',{params:{place_id:place.place_id,fields:'review',key:GOOGLE_PLACES_API_KEY}});}catch(error){console.error('Error fetching place details:',error);}return{id:place.place_id,name:place.name,type:((_place$types=place.types)===null||_place$types===void 0?void 0:(_place$types$=_place$types[0])===null||_place$types$===void 0?void 0:_place$types$.replace(/_/g,' '))||'venue',latitude:place.geometry.location.lat,longitude:place.geometry.location.lng,address:place.vicinity,rating:place.rating,imageUrl,reviews:(_details=details)===null||_details===void 0?void 0:(_details$data=_details.data)===null||_details$data===void 0?void 0:(_details$data$result=_details$data.result)===null||_details$data$result===void 0?void 0:(_details$data$result$=_details$data$result.reviews)===null||_details$data$result$===void 0?void 0:_details$data$result$.map(review=>({rating:review.rating,text:review.text,date:review.time}))};}));return places;}catch(error){var _error$response,_error$response$data;console.error('Error fetching places:',error);if(axios.isAxiosError(error)&&(_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.error_message){console.error('API Error:',error.response.data.error_message);}throw new Error('Failed to fetch nearby places. Please try again.');}};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","latitude","longitude","radius","arguments","length","undefined","_response$data","console","log","response","get","params","location","type","join","key","data","results","places","Promise","all","filter","place","geometry","name","map","_place$photos","_place$photos$","_place$types","_place$types$","_details","_details$data","_details$data$result","_details$data$result$","imageUrl","photos","photo_reference","details","place_id","fields","error","id","types","replace","lat","lng","address","vicinity","rating","reviews","result","review","text","date","time","_error$response","_error$response$data","isAxiosError","error_message","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  rating?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  distanceToMid?: number;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 500): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n\r\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\r\n      params: {\r\n        location: `${latitude},${longitude}`,\r\n        radius: radius,\r\n        type: ['restaurant', 'cafe', 'bar', 'park', 'movie_theater'].join('|'),\r\n        key: GOOGLE_PLACES_API_KEY,\r\n      }\r\n    });\r\n\r\n    if (!response.data?.results) {\r\n      console.log('No places found in response:', response.data);\r\n      return [];\r\n    }\r\n\r\n    console.log('Found places:', response.data.results.length);\r\n\r\n    const places = await Promise.all(response.data.results\r\n      .filter((place: any) => place.geometry && place.name)\r\n      .map(async (place: any) => {\r\n        let imageUrl;\r\n        if (place.photos?.[0]?.photo_reference) {\r\n          imageUrl = `/maps/api/place/photo?maxwidth=400&photo_reference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}`;\r\n        }\r\n\r\n        let details;\r\n        try {\r\n          details = await axios.get('/maps/api/place/details/json', {\r\n            params: {\r\n              place_id: place.place_id,\r\n              fields: 'review',\r\n              key: GOOGLE_PLACES_API_KEY,\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error('Error fetching place details:', error);\r\n        }\r\n\r\n        return {\r\n          id: place.place_id,\r\n          name: place.name,\r\n          type: place.types?.[0]?.replace(/_/g, ' ') || 'venue',\r\n          latitude: place.geometry.location.lat,\r\n          longitude: place.geometry.location.lng,\r\n          address: place.vicinity,\r\n          rating: place.rating,\r\n          imageUrl,\r\n          reviews: details?.data?.result?.reviews?.map((review: any) => ({\r\n            rating: review.rating,\r\n            text: review.text,\r\n            date: review.time\r\n          }))\r\n        };\r\n    }));\r\n\r\n    return places;\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    if (axios.isAxiosError(error) && error.response?.data?.error_message) {\r\n      console.error('API Error:', error.response.data.error_message);\r\n    }\r\n    throw new Error('Failed to fetch nearby places. Please try again.');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}