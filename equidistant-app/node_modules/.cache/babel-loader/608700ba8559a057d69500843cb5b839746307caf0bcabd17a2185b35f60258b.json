{"ast":null,"code":"import axios from 'axios';\n// Google Places API key from environment variable\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n\n/**\r\n * Search for nearby places based on latitude, longitude, and search radius\r\n * @param lat Latitude of the search center\r\n * @param lng Longitude of the search center\r\n * @param radius Search radius in meters\r\n * @param type Type of places to search for (e.g. 'restaurant', 'cafe', 'bar', 'pub' or multiple with '|' separator)\r\n * @returns Promise with search results (limited to 10 places)\r\n */\nexport const searchNearbyPlaces = async (lat, lng, radius, type) => {\n  console.log('Searching for nearby places:', {\n    lat,\n    lng,\n    radius,\n    type\n  });\n  try {\n    // Ensure we have proper type checking for the API response\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\n      params: {\n        location: `${lat},${lng}`,\n        radius,\n        type,\n        key: GOOGLE_PLACES_API_KEY\n        // Add any other required parameters here\n      }\n    });\n\n    // Check if the response is valid\n    if (response.data && response.data.results) {\n      // Return only the first 10 results\n      return response.data.results.slice(0, 10).map(place => ({\n        id: place.place_id,\n        name: place.name,\n        type: place.types[0].replace('_', ' '),\n        rating: place.rating,\n        address: place.vicinity,\n        latitude: place.geometry.location.lat,\n        longitude: place.geometry.location.lng,\n        imageUrl: place.photos && place.photos[0] ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : null,\n        reviews: place.reviews ? place.reviews.map(review => ({\n          rating: review.rating,\n          text: review.text,\n          date: review.time\n        })) : []\n      }));\n    }\n    return [];\n  } catch (error) {\n    console.error('Error fetching nearby places:', error);\n    throw new Error('Failed to fetch places nearby');\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","searchNearbyPlaces","lat","lng","radius","type","console","log","response","get","params","location","key","data","results","slice","map","place","id","place_id","name","types","replace","rating","address","vicinity","latitude","geometry","longitude","imageUrl","photos","photo_reference","reviews","review","text","date","time","error","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Review {\r\n  rating: number;\r\n  text: string;\r\n  date: string;\r\n}\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  rating?: number;\r\n  imageUrl?: string;\r\n  reviews?: Review[];\r\n  distanceToMid?: number;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\n// Google Places API key from environment variable\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\r\n\r\n/**\r\n * Search for nearby places based on latitude, longitude, and search radius\r\n * @param lat Latitude of the search center\r\n * @param lng Longitude of the search center\r\n * @param radius Search radius in meters\r\n * @param type Type of places to search for (e.g. 'restaurant', 'cafe', 'bar', 'pub' or multiple with '|' separator)\r\n * @returns Promise with search results (limited to 10 places)\r\n */\r\nexport const searchNearbyPlaces = async (lat: number, lng: number, radius: number, type: string) => {\r\n  console.log('Searching for nearby places:', { lat, lng, radius, type });\r\n  \r\n  try {\r\n    // Ensure we have proper type checking for the API response\r\n    const response = await axios.get('/maps/api/place/nearbysearch/json', {\r\n      params: {\r\n        location: `${lat},${lng}`,\r\n        radius,\r\n        type,\r\n        key: GOOGLE_PLACES_API_KEY,\r\n        // Add any other required parameters here\r\n      }\r\n    });\r\n\r\n    // Check if the response is valid\r\n    if (response.data && response.data.results) {\r\n      // Return only the first 10 results\r\n      return response.data.results.slice(0, 10).map((place: any) => ({\r\n        id: place.place_id,\r\n        name: place.name,\r\n        type: place.types[0].replace('_', ' '),\r\n        rating: place.rating,\r\n        address: place.vicinity,\r\n        latitude: place.geometry.location.lat,\r\n        longitude: place.geometry.location.lng,\r\n        imageUrl: place.photos && place.photos[0] ? \r\n          `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : null,\r\n        reviews: place.reviews ? place.reviews.map((review: any) => ({\r\n          rating: review.rating,\r\n          text: review.text,\r\n          date: review.time\r\n        })) : [],\r\n      }));\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error fetching nearby places:', error);\r\n    throw new Error('Failed to fetch places nearby');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAuBzB;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,GAAW,EAAEC,GAAW,EAAEC,MAAc,EAAEC,IAAY,KAAK;EAClGC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE;IAAEL,GAAG;IAAEC,GAAG;IAAEC,MAAM;IAAEC;EAAK,CAAC,CAAC;EAEvE,IAAI;IACF;IACA,MAAMG,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,mCAAmC,EAAE;MACpEC,MAAM,EAAE;QACNC,QAAQ,EAAE,GAAGT,GAAG,IAAIC,GAAG,EAAE;QACzBC,MAAM;QACNC,IAAI;QACJO,GAAG,EAAEf;QACL;MACF;IACF,CAAC,CAAC;;IAEF;IACA,IAAIW,QAAQ,CAACK,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACC,OAAO,EAAE;MAC1C;MACA,OAAON,QAAQ,CAACK,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEC,KAAU,KAAM;QAC7DC,EAAE,EAAED,KAAK,CAACE,QAAQ;QAClBC,IAAI,EAAEH,KAAK,CAACG,IAAI;QAChBf,IAAI,EAAEY,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;QACtCC,MAAM,EAAEN,KAAK,CAACM,MAAM;QACpBC,OAAO,EAAEP,KAAK,CAACQ,QAAQ;QACvBC,QAAQ,EAAET,KAAK,CAACU,QAAQ,CAAChB,QAAQ,CAACT,GAAG;QACrC0B,SAAS,EAAEX,KAAK,CAACU,QAAQ,CAAChB,QAAQ,CAACR,GAAG;QACtC0B,QAAQ,EAAEZ,KAAK,CAACa,MAAM,IAAIb,KAAK,CAACa,MAAM,CAAC,CAAC,CAAC,GACvC,gFAAgFb,KAAK,CAACa,MAAM,CAAC,CAAC,CAAC,CAACC,eAAe,QAAQlC,qBAAqB,EAAE,GAAG,IAAI;QACvJmC,OAAO,EAAEf,KAAK,CAACe,OAAO,GAAGf,KAAK,CAACe,OAAO,CAAChB,GAAG,CAAEiB,MAAW,KAAM;UAC3DV,MAAM,EAAEU,MAAM,CAACV,MAAM;UACrBW,IAAI,EAAED,MAAM,CAACC,IAAI;UACjBC,IAAI,EAAEF,MAAM,CAACG;QACf,CAAC,CAAC,CAAC,GAAG;MACR,CAAC,CAAC,CAAC;IACL;IAEA,OAAO,EAAE;EACX,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd/B,OAAO,CAAC+B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}