{"ast":null,"code":"/**\r\n * Calculate the distance between two points in kilometers using the Haversine formula\r\n * @param lat1 Latitude of first point\r\n * @param lon1 Longitude of first point\r\n * @param lat2 Latitude of second point\r\n * @param lon2 Longitude of second point\r\n * @returns Distance in kilometers\r\n */\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  // Haversine formula to calculate distance between two points on Earth\n  const R = 6371; // Radius of the Earth in kilometers\n  const dLat = degreesToRadians(lat2 - lat1);\n  const dLon = degreesToRadians(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in km\n};\n\n/**\r\n * Convert degrees to radians\r\n * @param degrees Angle in degrees\r\n * @returns Angle in radians\r\n */\nconst degreesToRadians = degrees => {\n  return degrees * (Math.PI / 180);\n};","map":{"version":3,"names":["calculateDistance","lat1","lon1","lat2","lon2","R","dLat","degreesToRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","degrees","PI"],"sources":["C:/Users/User1/equidistant-app/src/utils/distance.ts"],"sourcesContent":["/**\r\n * Calculate the distance between two points in kilometers using the Haversine formula\r\n * @param lat1 Latitude of first point\r\n * @param lon1 Longitude of first point\r\n * @param lat2 Latitude of second point\r\n * @param lon2 Longitude of second point\r\n * @returns Distance in kilometers\r\n */\r\nexport const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\r\n  // Haversine formula to calculate distance between two points on Earth\r\n  const R = 6371; // Radius of the Earth in kilometers\r\n  const dLat = degreesToRadians(lat2 - lat1);\r\n  const dLon = degreesToRadians(lon2 - lon1);\r\n  \r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) * \r\n    Math.sin(dLon/2) * Math.sin(dLon/2);\r\n  \r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c; // Distance in km\r\n};\r\n\r\n/**\r\n * Convert degrees to radians\r\n * @param degrees Angle in degrees\r\n * @returns Angle in radians\r\n */\r\nconst degreesToRadians = (degrees: number): number => {\r\n  return degrees * (Math.PI / 180);\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,IAAY,EAAEC,IAAY,EAAEC,IAAY,EAAEC,IAAY,KAAa;EACnG;EACA,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;EAChB,MAAMC,IAAI,GAAGC,gBAAgB,CAACJ,IAAI,GAAGF,IAAI,CAAC;EAC1C,MAAMO,IAAI,GAAGD,gBAAgB,CAACH,IAAI,GAAGF,IAAI,CAAC;EAE1C,MAAMO,CAAC,GACLC,IAAI,CAACC,GAAG,CAACL,IAAI,GAAC,CAAC,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACL,IAAI,GAAC,CAAC,CAAC,GACnCI,IAAI,CAACE,GAAG,CAACL,gBAAgB,CAACN,IAAI,CAAC,CAAC,GAAGS,IAAI,CAACE,GAAG,CAACL,gBAAgB,CAACJ,IAAI,CAAC,CAAC,GACnEO,IAAI,CAACC,GAAG,CAACH,IAAI,GAAC,CAAC,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACH,IAAI,GAAC,CAAC,CAAC;EAErC,MAAMK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACK,IAAI,CAACN,CAAC,CAAC,EAAEC,IAAI,CAACK,IAAI,CAAC,CAAC,GAACN,CAAC,CAAC,CAAC;EACtD,OAAOJ,CAAC,GAAGQ,CAAC,CAAC,CAAC;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMN,gBAAgB,GAAIS,OAAe,IAAa;EACpD,OAAOA,OAAO,IAAIN,IAAI,CAACO,EAAE,GAAG,GAAG,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}