{"ast":null,"code":"var _Constants$expoConfig, _Constants$expoConfig2;\nimport axios from 'axios';\nimport Constants from 'expo-constants';\n// Access the Google Geocoding API key from Expo Constants\nconst GOOGLE_GEOCODING_API_KEY = ((_Constants$expoConfig = Constants.expoConfig) === null || _Constants$expoConfig === void 0 ? void 0 : (_Constants$expoConfig2 = _Constants$expoConfig.extra) === null || _Constants$expoConfig2 === void 0 ? void 0 : _Constants$expoConfig2.googleGeocodingApiKey) || '';\n\n/**\r\n * Convert an address string to geocoordinates (lat/lon)\r\n * @param address The address to geocode\r\n * @returns Promise with geocoding result\r\n */\nexport const geocodeAddress = async address => {\n  try {\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${GOOGLE_GEOCODING_API_KEY}`);\n    if (response.data.status !== 'OK') {\n      throw new Error(`Geocoding failed with status: ${response.data.status}`);\n    }\n    if (!response.data.results || response.data.results.length === 0) {\n      throw new Error('No geocoding results found');\n    }\n    const result = response.data.results[0];\n    const location = result.geometry.location;\n    return {\n      lat: location.lat,\n      lon: location.lng,\n      formattedAddress: result.formatted_address\n    };\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw new Error('Failed to geocode address');\n  }\n};","map":{"version":3,"names":["axios","Constants","GOOGLE_GEOCODING_API_KEY","_Constants$expoConfig","expoConfig","_Constants$expoConfig2","extra","googleGeocodingApiKey","geocodeAddress","address","response","get","encodeURIComponent","data","status","Error","results","length","result","location","geometry","lat","lon","lng","formattedAddress","formatted_address","error","console"],"sources":["C:/Users/User1/equidistant-app/src/services/geocodingService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport Constants from 'expo-constants';\r\n\r\ninterface GeocodeResult {\r\n  lat: number;\r\n  lon: number;\r\n  formattedAddress: string;\r\n}\r\n\r\n// Access the Google Geocoding API key from Expo Constants\r\nconst GOOGLE_GEOCODING_API_KEY = Constants.expoConfig?.extra?.googleGeocodingApiKey || '';\r\n\r\n/**\r\n * Convert an address string to geocoordinates (lat/lon)\r\n * @param address The address to geocode\r\n * @returns Promise with geocoding result\r\n */\r\nexport const geocodeAddress = async (address: string): Promise<GeocodeResult> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${GOOGLE_GEOCODING_API_KEY}`\r\n    );\r\n\r\n    if (response.data.status !== 'OK') {\r\n      throw new Error(`Geocoding failed with status: ${response.data.status}`);\r\n    }\r\n\r\n    if (!response.data.results || response.data.results.length === 0) {\r\n      throw new Error('No geocoding results found');\r\n    }\r\n\r\n    const result = response.data.results[0];\r\n    const location = result.geometry.location;\r\n\r\n    return {\r\n      lat: location.lat,\r\n      lon: location.lng,\r\n      formattedAddress: result.formatted_address\r\n    };\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw new Error('Failed to geocode address');\r\n  }\r\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,gBAAgB;AAQtC;AACA,MAAMC,wBAAwB,GAAG,EAAAC,qBAAA,GAAAF,SAAS,CAACG,UAAU,cAAAD,qBAAA,wBAAAE,sBAAA,GAApBF,qBAAA,CAAsBG,KAAK,cAAAD,sBAAA,uBAA3BA,sBAAA,CAA6BE,qBAAqB,KAAI,EAAE;;AAEzF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAe,IAA6B;EAC/E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAC9B,6DAA6DC,kBAAkB,CAACH,OAAO,CAAC,QAAQP,wBAAwB,EAC1H,CAAC;IAED,IAAIQ,QAAQ,CAACG,IAAI,CAACC,MAAM,KAAK,IAAI,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,iCAAiCL,QAAQ,CAACG,IAAI,CAACC,MAAM,EAAE,CAAC;IAC1E;IAEA,IAAI,CAACJ,QAAQ,CAACG,IAAI,CAACG,OAAO,IAAIN,QAAQ,CAACG,IAAI,CAACG,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAChE,MAAM,IAAIF,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,MAAMG,MAAM,GAAGR,QAAQ,CAACG,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;IACvC,MAAMG,QAAQ,GAAGD,MAAM,CAACE,QAAQ,CAACD,QAAQ;IAEzC,OAAO;MACLE,GAAG,EAAEF,QAAQ,CAACE,GAAG;MACjBC,GAAG,EAAEH,QAAQ,CAACI,GAAG;MACjBC,gBAAgB,EAAEN,MAAM,CAACO;IAC3B,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAM,IAAIX,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}