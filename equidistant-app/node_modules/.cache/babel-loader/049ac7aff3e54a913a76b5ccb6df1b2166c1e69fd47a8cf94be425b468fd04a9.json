{"ast":null,"code":"import axios from'axios';export const geocodeAddress=async address=>{try{console.log('Geocoding postcode:',address);const cleanPostcode=address.trim().toUpperCase().replace(/\\s+/g,'');const encodedPostcode=encodeURIComponent(cleanPostcode+', London, UK');const response=await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${encodedPostcode}&countrycodes=gb&bounded=1&viewbox=-0.5339,51.7225,0.3177,51.2867&limit=1`);if(!response.data||response.data.length===0){console.error('Invalid postcode:',address);throw new Error(`Invalid London postcode: ${address}`);}const result={lat:parseFloat(response.data[0].lat),lon:parseFloat(response.data[0].lon),display_name:response.data[0].display_name};console.log('Geocoding result:',result);return result;}catch(error){console.error('Geocoding error:',error);throw new Error(`Please enter a valid London postcode`);}};","map":{"version":3,"names":["axios","geocodeAddress","address","console","log","cleanPostcode","trim","toUpperCase","replace","encodedPostcode","encodeURIComponent","response","get","data","length","error","Error","result","lat","parseFloat","lon","display_name"],"sources":["C:/Users/User1/equidistant-app/src/services/geocodingService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\ninterface GeocodingResult {\r\n  lat: number;\r\n  lon: number;\r\n  display_name: string;\r\n}\r\n\r\nexport const geocodeAddress = async (address: string): Promise<GeocodingResult> => {\r\n  try {\r\n    console.log('Geocoding postcode:', address);\r\n    const cleanPostcode = address.trim().toUpperCase().replace(/\\s+/g, '');\r\n    const encodedPostcode = encodeURIComponent(cleanPostcode + ', London, UK');\r\n    \r\n    const response = await axios.get(\r\n      `https://nominatim.openstreetmap.org/search?format=json&q=${encodedPostcode}&countrycodes=gb&bounded=1&viewbox=-0.5339,51.7225,0.3177,51.2867&limit=1`\r\n    );\r\n\r\n    if (!response.data || response.data.length === 0) {\r\n      console.error('Invalid postcode:', address);\r\n      throw new Error(`Invalid London postcode: ${address}`);\r\n    }\r\n\r\n    const result = {\r\n      lat: parseFloat(response.data[0].lat),\r\n      lon: parseFloat(response.data[0].lon),\r\n      display_name: response.data[0].display_name\r\n    };\r\n\r\n    console.log('Geocoding result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw new Error(`Please enter a valid London postcode`);\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAQzB,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAO,CAAAC,OAAe,EAA+B,CACjF,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEF,OAAO,CAAC,CAC3C,KAAM,CAAAG,aAAa,CAAGH,OAAO,CAACI,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,CACtE,KAAM,CAAAC,eAAe,CAAGC,kBAAkB,CAACL,aAAa,CAAG,cAAc,CAAC,CAE1E,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAX,KAAK,CAACY,GAAG,CAC9B,4DAA4DH,eAAe,2EAC7E,CAAC,CAED,GAAI,CAACE,QAAQ,CAACE,IAAI,EAAIF,QAAQ,CAACE,IAAI,CAACC,MAAM,GAAK,CAAC,CAAE,CAChDX,OAAO,CAACY,KAAK,CAAC,mBAAmB,CAAEb,OAAO,CAAC,CAC3C,KAAM,IAAI,CAAAc,KAAK,CAAC,4BAA4Bd,OAAO,EAAE,CAAC,CACxD,CAEA,KAAM,CAAAe,MAAM,CAAG,CACbC,GAAG,CAAEC,UAAU,CAACR,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAACK,GAAG,CAAC,CACrCE,GAAG,CAAED,UAAU,CAACR,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAACO,GAAG,CAAC,CACrCC,YAAY,CAAEV,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAACQ,YACjC,CAAC,CAEDlB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEa,MAAM,CAAC,CACxC,MAAO,CAAAA,MAAM,CACf,CAAE,MAAOF,KAAK,CAAE,CACdZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC,KAAM,IAAI,CAAAC,KAAK,CAAC,sCAAsC,CAAC,CACzD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}