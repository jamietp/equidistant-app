{"ast":null,"code":"import axios from 'axios';\nexport const searchNearbyPlaces = async (latitude, longitude, radius = 6400) => {\n  try {\n    console.log('Searching for places near:', {\n      latitude,\n      longitude\n    });\n    const viewboxDelta = 0.1;\n    const categoryQuery = '[amenity=restaurant][amenity=cafe][amenity=bar][amenity=pub][leisure=park]';\n    const response = await axios.get(`https://overpass-api.de/api/interpreter`, {\n      params: {\n        data: `\n            [out:json][timeout:25];\n            (\n              node${categoryQuery}(around:${radius},${latitude},${longitude});\n              way${categoryQuery}(around:${radius},${latitude},${longitude});\n            );\n            out body;\n            >;\n            out skel qt;\n          `\n      }\n    });\n    if (!response.data || !response.data.elements) {\n      console.log('No places found in response');\n      return [];\n    }\n    console.log('Found places:', response.data.elements.length);\n    return response.data.elements.filter(element => element.tags && (element.tags.name || element.tags.amenity)).map(element => {\n      var _element$center, _element$center2;\n      return {\n        id: element.id.toString(),\n        name: element.tags.name || element.tags.amenity,\n        type: element.tags.amenity || element.tags.leisure || 'place',\n        latitude: element.lat || ((_element$center = element.center) === null || _element$center === void 0 ? void 0 : _element$center.lat),\n        longitude: element.lon || ((_element$center2 = element.center) === null || _element$center2 === void 0 ? void 0 : _element$center2.lon),\n        address: element.tags['addr:street'] ? `${element.tags['addr:street']} ${element.tags['addr:housenumber'] || ''}` : undefined\n      };\n    }).filter(place => place.latitude && place.longitude);\n  } catch (error) {\n    console.error('Error fetching places:', error);\n    throw new Error('Failed to fetch nearby places');\n  }\n};","map":{"version":3,"names":["axios","searchNearbyPlaces","latitude","longitude","radius","console","log","viewboxDelta","categoryQuery","response","get","params","data","elements","length","filter","element","tags","name","amenity","map","_element$center","_element$center2","id","toString","type","leisure","lat","center","lon","address","undefined","place","error","Error"],"sources":["C:/Users/User1/equidistant-app/src/services/placesService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Place {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  address?: string;\r\n  distanceToLoc1?: number;\r\n  distanceToLoc2?: number;\r\n}\r\n\r\nexport const searchNearbyPlaces = async (latitude: number, longitude: number, radius: number = 6400): Promise<Place[]> => {\r\n  try {\r\n    console.log('Searching for places near:', { latitude, longitude });\r\n    const viewboxDelta = 0.1;\r\n    const categoryQuery = '[amenity=restaurant][amenity=cafe][amenity=bar][amenity=pub][leisure=park]';\r\n    \r\n    const response = await axios.get(\r\n      `https://overpass-api.de/api/interpreter`,\r\n      {\r\n        params: {\r\n          data: `\r\n            [out:json][timeout:25];\r\n            (\r\n              node${categoryQuery}(around:${radius},${latitude},${longitude});\r\n              way${categoryQuery}(around:${radius},${latitude},${longitude});\r\n            );\r\n            out body;\r\n            >;\r\n            out skel qt;\r\n          `\r\n        }\r\n      }\r\n    );\r\n\r\n    if (!response.data || !response.data.elements) {\r\n      console.log('No places found in response');\r\n      return [];\r\n    }\r\n\r\n    console.log('Found places:', response.data.elements.length);\r\n\r\n    return response.data.elements\r\n      .filter((element: any) => element.tags && (element.tags.name || element.tags.amenity))\r\n      .map((element: any) => ({\r\n        id: element.id.toString(),\r\n        name: element.tags.name || element.tags.amenity,\r\n        type: element.tags.amenity || element.tags.leisure || 'place',\r\n        latitude: element.lat || element.center?.lat,\r\n        longitude: element.lon || element.center?.lon,\r\n        address: element.tags['addr:street'] ? \r\n          `${element.tags['addr:street']} ${element.tags['addr:housenumber'] || ''}` : \r\n          undefined\r\n      }))\r\n      .filter((place: Place) => place.latitude && place.longitude);\r\n  } catch (error) {\r\n    console.error('Error fetching places:', error);\r\n    throw new Error('Failed to fetch nearby places');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAazB,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,GAAG,IAAI,KAAuB;EACxH,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;MAAEJ,QAAQ;MAAEC;IAAU,CAAC,CAAC;IAClE,MAAMI,YAAY,GAAG,GAAG;IACxB,MAAMC,aAAa,GAAG,4EAA4E;IAElG,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAC9B,yCAAyC,EACzC;MACEC,MAAM,EAAE;QACNC,IAAI,EAAE;AAChB;AACA;AACA,oBAAoBJ,aAAa,WAAWJ,MAAM,IAAIF,QAAQ,IAAIC,SAAS;AAC3E,mBAAmBK,aAAa,WAAWJ,MAAM,IAAIF,QAAQ,IAAIC,SAAS;AAC1E;AACA;AACA;AACA;AACA;MACQ;IACF,CACF,CAAC;IAED,IAAI,CAACM,QAAQ,CAACG,IAAI,IAAI,CAACH,QAAQ,CAACG,IAAI,CAACC,QAAQ,EAAE;MAC7CR,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAO,EAAE;IACX;IAEAD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAACC,MAAM,CAAC;IAE3D,OAAOL,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAC1BE,MAAM,CAAEC,OAAY,IAAKA,OAAO,CAACC,IAAI,KAAKD,OAAO,CAACC,IAAI,CAACC,IAAI,IAAIF,OAAO,CAACC,IAAI,CAACE,OAAO,CAAC,CAAC,CACrFC,GAAG,CAAEJ,OAAY;MAAA,IAAAK,eAAA,EAAAC,gBAAA;MAAA,OAAM;QACtBC,EAAE,EAAEP,OAAO,CAACO,EAAE,CAACC,QAAQ,CAAC,CAAC;QACzBN,IAAI,EAAEF,OAAO,CAACC,IAAI,CAACC,IAAI,IAAIF,OAAO,CAACC,IAAI,CAACE,OAAO;QAC/CM,IAAI,EAAET,OAAO,CAACC,IAAI,CAACE,OAAO,IAAIH,OAAO,CAACC,IAAI,CAACS,OAAO,IAAI,OAAO;QAC7DxB,QAAQ,EAAEc,OAAO,CAACW,GAAG,MAAAN,eAAA,GAAIL,OAAO,CAACY,MAAM,cAAAP,eAAA,uBAAdA,eAAA,CAAgBM,GAAG;QAC5CxB,SAAS,EAAEa,OAAO,CAACa,GAAG,MAAAP,gBAAA,GAAIN,OAAO,CAACY,MAAM,cAAAN,gBAAA,uBAAdA,gBAAA,CAAgBO,GAAG;QAC7CC,OAAO,EAAEd,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC,GAClC,GAAGD,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC,IAAID,OAAO,CAACC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,EAAE,GAC1Ec;MACJ,CAAC;IAAA,CAAC,CAAC,CACFhB,MAAM,CAAEiB,KAAY,IAAKA,KAAK,CAAC9B,QAAQ,IAAI8B,KAAK,CAAC7B,SAAS,CAAC;EAChE,CAAC,CAAC,OAAO8B,KAAK,EAAE;IACd5B,OAAO,CAAC4B,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}